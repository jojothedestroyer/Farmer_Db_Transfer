<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Firebase Sync with IndexedDB</title>
  <style>
    /* Styling for the loading spinner */
    #loadingSpinner {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      display: none;
      z-index: 9999;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 20px;
      border-radius: 10px;
      color: white;
      font-size: 16px;
    }
  </style>
</head>
<body>

<!-- Loading Spinner -->
<div id="loadingSpinner">Syncing data... Please wait...</div>

<script type="module">
  // Import Firebase modules
  import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
  import { getDatabase, ref, set, get, query, orderByChild, equalTo, update } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-database.js";
  import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js";

  // Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyBZTB_mN_gIb6mqeM8nid4x83oKRehmFKo",
    authDomain: "farmer-project-sync.firebaseapp.com",
    databaseURL: "https://farmer-project-sync-default-rtdb.firebaseio.com",
    projectId: "farmer-project-sync",
    storageBucket: "farmer-project-sync.firebasestorage.app",
    messagingSenderId: "1366353203",
    appId: "1:1366353203:web:fa29fd29cc326a0d63ca46"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);
  const auth = getAuth(app);

  document.addEventListener("DOMContentLoaded", async function () {
    console.log("Initializing IndexedDB...");
    await initializeIndexedDB(); // Initialize IndexedDB first
    console.log("Finished initializing IndexedDB.");
    checkUserAndSyncData();
  });

  // Initialize IndexedDB and create object stores if they don't exist
  function initializeIndexedDB() {
    return new Promise((resolve, reject) => {
      const dbVersion = 2; // Increment this number if you change the schema
      var request = indexedDB.open("GCNA", dbVersion);

      request.onupgradeneeded = function (event) {
        var db = event.target.result;
        console.log("Database upgrade needed. Creating object stores...");

        const modelNames = [
          "Worker", "Farmer", "DriedA", "DriedB", "FloatA", "FloatB", "Quaility", "visit",
          "In-House-Drying", "Dispatch-Of-Dried-Nutmeg", "Dispatch-Of-Green", "Cracking-Summary",
          "Floation-Summary", "Package-Ciontrol", "Editors", "Labour-support", "Training-support",
          "land-info", "Land-Tenur", "Nutmeg-Trees", "Nutmeg-Variety", "Other-Crops", "Coconut-Trees",
          "Citrus-Mango-Trees", "Other-Spices-Trees", "Other-Seasoning-Trees", "Other-Crops-Cultivated",
          "Condition", "Nutmeg-Land", "Nutmeg-Frequency", "Potential-Risks", "Road-Access",
          "Food-Safety-and-Quality", "Farm-Water-Source", "Farm-House", "inspector-symmary", "Policy",
          "Sanitation-A", "Sanitation-B", "Sanitation-C", "Cracking_Schedule", "Assorting_Log",
          "Extractor_Log", "Fumigation_Log", "Shelves", "W_Shelves", "M_Shelves", "W_Shelves_Dried",
          "M_Shelves_Dried", "Vehicle_Inspection", "Final_Weight_Inspection", "Final_Weight_Inspection_fields",
          "Dispatch_Of_Dried_Nutmeg_Rec", "Dispatch_Of_Green_Nutmeg_Rec", "Mace_Dispatched", "Mace_Purchase",
          "Mace_Dispatched_Rec", "Cracking_Extraction_Summary", "Day_Of_Loading", "TruckEntry",
          "Container_Inspection_Log"
        ];

        modelNames.forEach((modelName) => {
          if (!db.objectStoreNames.contains(modelName)) {
            console.log(`Creating object store: ${modelName}`);
            db.createObjectStore(modelName, { keyPath: "id" }); // Store data by 'id'
          } else {
            console.log(`Object store already exists: ${modelName}`);
          }
        });
      };

      request.onsuccess = function (event) {
        console.log("IndexedDB initialized successfully.");
        resolve(event.target.result);
      };

      request.onerror = function (event) {
        console.error("Error opening IndexedDB:", event);
        reject("Error opening IndexedDB:", event);
      };
    });
  }

  async function checkUserAndSyncData() {
    console.log("Checking for current user...");
    const user = await getCurrentUser();
    if (!user) {
      console.log("No user found. Prompting for user creation...");
      showUserModal();
    } else {
      console.log("User found:", user.customUserId);
      if (navigator.onLine) {
        syncDataWithFirebase(user.customUserId); // Use customUserId for syncing only when online
      } else {
        console.log("User is offline, will sync when online.");
      }
    }
  }

  async function getCurrentUser() {
    // Check if customUserId is already stored in localStorage
    const customUserId = localStorage.getItem("customUserId");
    if (customUserId) {
      console.log("User ID found in localStorage:", customUserId);
      return { customUserId }; // Return customUserId if it exists
    }

    // If no customUserId is found, prompt the user to log in
    return null;
  }

  function showUserModal() {
    const userName = prompt("Please enter your name:");
    if (userName) {
      console.log("User name provided:", userName);
      createUser(userName);
    } else {
      console.log("No user name provided.");
    }
  }

  async function createUser(userName) {
    // Check if the user already exists in Firebase
    console.log("Searching for user in Firebase...");
    const existingUser = await findUserByName(userName);
    if (existingUser) {
      console.log("User already exists in Firebase:", existingUser);
      const customUserId = existingUser.customUserId;
      localStorage.setItem("customUserId", customUserId); // Save to localStorage
      console.log("User logged in successfully!");
      if (navigator.onLine) {
        syncDataWithFirebase(customUserId); // Sync data if online
      }
    } else {
      console.log("User does not exist. Creating new user...");
      const customUserId = generateCustomUserId(userName);
      localStorage.setItem("customUserId", customUserId); // Save to localStorage

      // Save the username and customUserId in Firebase
      await set(ref(db, `Users/${customUserId}/name`), userName);
      console.log("User created successfully in Firebase!");
      if (navigator.onLine) {
        syncDataWithFirebase(customUserId); // Sync data if online
      }
    }
  }

  async function findUserByName(userName) {
    // Query Firebase to find a user by name
    const usersRef = ref(db, "Users");
    const userQuery = query(usersRef, orderByChild("name"), equalTo(userName));
    const snapshot = await get(userQuery);

    if (snapshot.exists()) {
      // Return the first matching user's customUserId
      const userData = snapshot.val();
      const customUserId = Object.keys(userData)[0];
      console.log("User found in Firebase with customUserId:", customUserId);
      return { customUserId };
    } else {
      console.log("No user found in Firebase.");
      return null; // No user found
    }
  }

  function generateCustomUserId(userName) {
    // Generate a unique ID based on the username and a random string
    const randomString = Math.random().toString(36).substring(2, 10);
    return `${userName}-${randomString}`;
  }

  async function syncDataWithFirebase(customUserId) {
    disableUserInteraction(); // Disable user interaction while syncing
    showLoadingSpinner(true); // Show the loading spinner
    console.log("Syncing data with Firebase for user:", customUserId);
    const indexedDBData = await getIndexedDBData();

    if (indexedDBData.length === 0) {
      console.log("IndexedDB is empty. Loading data from Firebase...");
      await loadDataFromFirebase(customUserId);
    } else {
      console.log("IndexedDB contains data. Uploading to Firebase...");
      await uploadDataToFirebase(customUserId, indexedDBData);
      console.log("Syncing IndexedDB with Firebase...");
      await syncIndexedDBWithFirebase(customUserId);
    }
    hideLoadingSpinner(); // Hide the loading spinner
    enableUserInteraction(); // Re-enable user interaction after syncing
  }

  async function getIndexedDBData() {
    const db = await initializeIndexedDB();
    return new Promise((resolve, reject) => {
      const modelNames = [
        "Worker", "Farmer", "DriedA", "DriedB", "FloatA", "FloatB", "Quaility", "visit",
        "In-House-Drying", "Dispatch-Of-Dried-Nutmeg", "Dispatch-Of-Green", "Cracking-Summary",
        "Floation-Summary", "Package-Ciontrol", "Editors", "Labour-support", "Training-support",
        "land-info", "Land-Tenur", "Nutmeg-Trees", "Nutmeg-Variety", "Other-Crops", "Coconut-Trees",
        "Citrus-Mango-Trees", "Other-Spices-Trees", "Other-Seasoning-Trees", "Other-Crops-Cultivated",
        "Condition", "Nutmeg-Land", "Nutmeg-Frequency", "Potential-Risks", "Road-Access",
        "Food-Safety-and-Quality", "Farm-Water-Source", "Farm-House", "inspector-symmary", "Policy",
        "Sanitation-A", "Sanitation-B", "Sanitation-C", "Cracking_Schedule", "Assorting_Log",
        "Extractor_Log", "Fumigation_Log", "Shelves", "W_Shelves", "M_Shelves", "W_Shelves_Dried",
        "M_Shelves_Dried", "Vehicle_Inspection", "Final_Weight_Inspection", "Final_Weight_Inspection_fields",
        "Dispatch_Of_Dried_Nutmeg_Rec", "Dispatch_Of_Green_Nutmeg_Rec", "Mace_Dispatched", "Mace_Purchase",
        "Mace_Dispatched_Rec", "Cracking_Extraction_Summary", "Day_Of_Loading", "TruckEntry",
        "Container_Inspection_Log"
      ];

      const allData = [];

      modelNames.forEach((modelName) => {
        const transaction = db.transaction(modelName, "readonly");
        const store = transaction.objectStore(modelName);
        const request = store.getAll();

        request.onsuccess = function () {
          allData.push({ modelName, data: request.result });
          if (allData.length === modelNames.length) {
            resolve(allData);
          }
        };

        request.onerror = function () {
          reject("Error reading data from IndexedDB");
        };
      });
    });
  }

  async function uploadDataToFirebase(customUserId, data) {
    try {
      console.log("Uploading data to Firebase...");
      const userRef = ref(db, `Users/${customUserId}/models`);

      for (const model of data) {
        const modelName = model.modelName;
        const modelData = model.data;

        const modelRef = ref(db, `Users/${customUserId}/models/${modelName}`);

        // Check if the model already exists in Firebase
        const snapshot = await get(modelRef);
        if (snapshot.exists()) {
          console.log(`Model ${modelName} already exists in Firebase. Skipping upload.`);
          // Optionally, update or add new data if needed
          await update(modelRef, modelData); // Only update if needed
        } else {
          await set(modelRef, modelData);
          console.log(`Uploaded ${modelData.length} items to Firebase for model ${modelName}`);
        }
      }

      console.log("Data uploaded successfully to Firebase.");
    } catch (error) {
      console.error("Error uploading data to Firebase:", error);
    }
  }

  async function loadDataFromFirebase(customUserId) {
    console.log("Loading data from Firebase...");
    const userRef = ref(db, `Users/${customUserId}/models`);
    const snapshot = await get(userRef);

    if (snapshot.exists()) {
      const data = snapshot.val();
      for (const modelName in data) {
        const modelData = data[modelName];
        console.log(`Loading ${modelName} from Firebase`);
        await loadModelToIndexedDB(modelName, modelData);
      }
      console.log("Data successfully loaded from Firebase.");
    } else {
      console.log("No data found in Firebase.");
    }
  }

  async function loadModelToIndexedDB(modelName, modelData) {
    const db = await initializeIndexedDB();
    const transaction = db.transaction(modelName, "readwrite");
    const store = transaction.objectStore(modelName);
    modelData.forEach(item => {
      store.put(item); // Add or update the record in IndexedDB
    });
  }

  async function syncIndexedDBWithFirebase(customUserId) {
    console.log("Syncing IndexedDB with Firebase...");

    // First, get all the data from IndexedDB
    const indexedDBData = await getIndexedDBData();
    for (const model of indexedDBData) {
      const modelName = model.modelName;
      const modelData = model.data;

      // Upload the model data to Firebase
      await uploadDataToFirebase(customUserId, [{ modelName, data: modelData }]);
    }
    console.log("IndexedDB synced with Firebase.");
  }

  function disableUserInteraction() {
    // Disable interaction while syncing
    document.body.style.pointerEvents = "none";
    console.log("User interaction disabled.");
  }

  function enableUserInteraction() {
    // Enable interaction after syncing
    document.body.style.pointerEvents = "auto";
    console.log("User interaction enabled.");
  }

  function showLoadingSpinner(show) {
    const spinner = document.getElementById("loadingSpinner");
    if (show) {
      spinner.style.display = "block";
    } else {
      spinner.style.display = "none";
    }
  }

  function hideLoadingSpinner() {
    showLoadingSpinner(false);
  }

</script>

</body>
</html>
